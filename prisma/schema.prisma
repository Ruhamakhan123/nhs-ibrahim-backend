// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String   @unique
  password       String
  role           String   @default("user")
  specialization String?
  license        String?
  age            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  patients Patient[] @relation("DoctorPatients")
}

model Patient {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  attendedByDoctorId String        @db.ObjectId
  name               String
  fatherName         String
  email              String
  identity           Identity
  cnic               String?
  crc                CRC
  crcNumber          String
  contactNumber      String
  education          String
  age                String
  marriageYears      String
  occupation         String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  address            String
  catchmentArea      CatchmentArea
  Visit              Visit[]
  tokenNumber        Int?
  amountPayed        String
  relation           Relation[]

  // Optional relation to PatientDetails
  details            PatientDetails? @relation("PatientDetailsRelation")

  attendedByDoctor   User            @relation("DoctorPatients", fields: [attendedByDoctorId], references: [id])
}

model PatientDetails {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId     String   @unique @db.ObjectId // Unique to maintain a one-to-one relationship
  weight         Float?
  sugarLevel     Float?
  temperature    Float?
  height         Float?
  bloodPressure   String?

  // Relation to Patient with fields and references
  patient       Patient  @relation("PatientDetailsRelation", fields: [patientId], references: [id])
}


model GlobalSetting {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  lastTokenDate DateTime @default(now())
  lastToken     Int      @default(0)
}

model Relation {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  patientId    String       @db.ObjectId
  relation     Relationship @default(NONE)
  relationName String?
  relationCNIC String?
  patient      Patient      @relation(fields: [patientId], references: [id])
}

model Visit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId   String   @db.ObjectId
  date        DateTime @default(now())
  tokenNumber Int
  patient     Patient? @relation(fields: [patientId], references: [id])
}

enum Relationship {
  PARENT
  SIBLING
  CHILD
  NONE
}

enum Identity {
  PAKISTANI
  OTHER
}

enum CRC {
  OLD
  NEW
}

enum CatchmentArea {
  URBAN
  RURAL
  SLUM
}
